
    
              "    <tr>\n",
              "      <th>54746</th>\n",
              "      <td>Mexico City</td>\n",
              "      <td>2019-12-26</td>\n",
              "      <td>6.329219</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54747</th>\n",
              "      <td>Mexico City</td>\n",
              "      <td>2019-12-27</td>\n",
              "      <td>7.073087</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54748</th>\n",
              "      <td>Mexico City</td>\n",
              "      <td>2019-12-28</td>\n",
              "      <td>10.341618</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54749</th>\n",
              "      <td>Mexico City</td>\n",
              "      <td>2019-12-29</td>\n",
              "      <td>13.644215</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>54750 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "              city   timestamp  temperature  season\n",
              "0         New York  2010-01-01    -3.805826  winter\n",
              "1         New York  2010-01-02     0.283720  winter\n",
              "2         New York  2010-01-03    -5.816857  winter\n",
              "3         New York  2010-01-04    -1.463427  winter\n",
              "4         New York  2010-01-05    -6.332554  winter\n",
              "...            ...         ...          ...     ...\n",
              "54745  Mexico City  2019-12-25     7.507953  winter\n",
              "54746  Mexico City  2019-12-26     6.329219  winter\n",
              "54747  Mexico City  2019-12-27     7.073087  winter\n",
              "54748  Mexico City  2019-12-28    10.341618  winter\n",
              "54749  Mexico City  2019-12-29    13.644215  winter\n",
              "\n",
              "[54750 rows x 4 columns]"
            ]
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df = pd.read_csv('temperature_data.csv')\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['New York', 'London', 'Paris', 'Tokyo', 'Moscow', 'Sydney',\n",
              "       'Berlin', 'Beijing', 'Rio de Janeiro', 'Dubai', 'Los Angeles',\n",
              "       'Singapore', 'Mumbai', 'Cairo', 'Mexico City'], dtype=object)"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cities = df['city'].unique()\n",
        "cities"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [],
      "source": [
        "def analysis_temperature_of_city(df, city):\n",
        "    # Фильтр по городу\n",
        "    df_city = df.loc[df['city'] == city].copy()\n",
        "\n",
        "    #Основные показатели\n",
        "    avg_temp = df_city['temperature'].mean()\n",
        "    min_temp = df_city['temperature'].min()\n",
        "    max_temp = df_city['temperature'].max()\n",
        "\n",
        "\n",
        "    # Скользящее среднее и стандартное отклонение за 30 дней\n",
        "    df_city['roll_mean_30_days'] = df_city['temperature'].rolling(window=30).mean()\n",
        "    df_city['roll_std_30_days'] = df_city['temperature'].rolling(window=30).std()\n",
        "\n",
        "    # Поиск аномалий\n",
        "    df_city['anomaly'] = (\n",
        "        (df_city[\"temperature\"] < \n",
        "         (df_city[\"roll_mean_30_days\"] - 2 * df_city[\"roll_std_30_days\"])) |\n",
        "        (df_city[\"temperature\"] > \n",
        "         (df_city[\"roll_mean_30_days\"] + 2 * df_city[\"roll_std_30_days\"]))\n",
        "    )\n",
        "    \n",
        "    anomalies = df_city.loc[df_city['anomaly']]\n",
        "    # Профиль по сезонам\n",
        "    profile_of_season = df_city.groupby('season', as_index=False).agg(\n",
        "        temperature_mean=('temperature', 'mean'),\n",
        "        temperature_std=('temperature', 'std')\n",
        "    )\n",
        "    \n",
        "    \n",
        "    df_city['timestamp'] = pd.to_datetime(df_city['timestamp'])\n",
        "    df_city['days'] = (df_city['timestamp'] - df_city['timestamp'].min()).dt.days\n",
        "    X = df_city[['days']]\n",
        "    y = df_city['temperature']\n",
        "    model = LinearRegression()\n",
        "    model.fit(X, y)\n",
        "    trend_slope = model.coef_[0]\n",
        "\n",
        "\n",
        "\n",
        "    return {\n",
        "        \"city\": city,\n",
        "        \"df_city\": df_city,\n",
        "        \"avg_temp\": avg_temp,\n",
        "        \"min_temp\": min_temp,\n",
        "        \"max_temp\": max_temp,\n",
        "        \"anomalies\": anomalies,\n",
        "        \"profile_of_season\": profile_of_season,\n",
        "        \"trend_slope\": trend_slope\n",
        "\n",
        "    }\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "***Попробуйте распараллелить проведение этого анализа. Сравните скорость выполнения анализа с распараллеливанием и без него***\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Последовательно\n",
        "def analyze_cities_default(df, cities):\n",
        "    results = []\n",
        "    start_time = time.time()\n",
        "\n",
        "    for city in cities:\n",
        "        result = analysis_temperature_of_city(df, city)\n",
        "        results.append(result)\n",
        "\n",
        "    end_time = time.time() - start_time\n",
        "    return results, end_time\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Параллельно\n",
        "from concurrent.futures import ThreadPoolExecutor\n",
        "\n",
        "def analyze_cities_threading(df, cities, n_threads=4):\n",
        "    start_time = time.time()\n",
        "    with ThreadPoolExecutor(max_workers=n_threads) as executor:\n",
        "        results = list(executor.map(lambda city: analysis_temperature_of_city(df, city), cities))\n",
        "    duration = time.time() - start_time\n",
        "    return results, duration"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Время выполнения паралльного анализа 0.0845949649810791\n",
            "Время выполнения последовательного анализа 0.05807209014892578\n"
          ]
        }
      ],
      "source": [
        "results_1, duration_1  = analyze_cities_threading(df, cities, n_threads = 4)\n",
        "results_2, duration_2 = analyze_cities_default(df, cities)\n",
        "print(\"Время выполнения паралльного анализа\", duration_1)\n",
        "print(\"Время выполнения последовательного анализа\", duration_2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "***Вывод: Последовательное выполнение анализа исторических данных оказался чуть быстре***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "***Мониториг текущей температуры***\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [],
      "source": [
        "month_to_season_mapping = {\n",
        "    1: \"winter\",\n",
        "    2: \"winter\",\n",
        "    3: \"spring\",\n",
        "    4: \"spring\",\n",
        "    5: \"spring\",\n",
        "    6: \"summer\",\n",
        "    7: \"summer\",\n",
        "    8: \"summer\",\n",
        "    9: \"autumn\",\n",
        "    10: \"autumn\",\n",
        "    11: \"autumn\",\n",
        "    12: \"winter\",\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {},
      "outputs": [],
      "source": [
        "def get_current_temp_of_city(API_KEY, city):\n",
        "    URL = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric'\n",
        "    response = requests.get(URL)\n",
        "    current_datetime = datetime.datetime.now()\n",
        "    month_of_temp = current_datetime.month\n",
        "\n",
        "    if response.status_code == 200:\n",
        "        data = response.json()\n",
        "        temperature = data['main']['temp']\n",
        "        return temperature, month_of_temp\n",
        "    else:\n",
        "        raise Exception(f\" Ошибка при получении данных с сайта OpenWeather: {response.status_code}, {response.text}\")\n",
        "    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Время выполнения через последовательное получение данных 3.505703926086426\n"
          ]
        }
      ],
      "source": [
        "API_KEY = \"a930241dd9464b1168656e0a6630b7a7\"\n",
        "city = data['city'].unique()\n",
        "results = []\n",
        "start_time = time.time()\n",
        "for city in cities:\n",
        "    cur_temp, cur_month = get_current_temp_of_city(API_KEY, city)\n",
        "    results.append({\"city\": city, \"temperature\": cur_temp, \"month\": cur_month})\n",
        "                   \n",
        "end_time = time.time() - start_time\n",
        "\n",
        "print('Время выполнения через последовательное получение данных', end_time)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[{'city': 'New York', 'temperature': 4.33, 'month': 1},\n",
              " {'city': 'London', 'temperature': 2.45, 'month': 1},\n",
              " {'city': 'Paris', 'temperature': 4.2, 'month': 1},\n",
              " {'city': 'Tokyo', 'temperature': 5.09, 'month': 1},\n",
              " {'city': 'Moscow', 'temperature': -0.52, 'month': 1},\n",
              " {'city': 'Sydney', 'temperature': 21.29, 'month': 1},\n",
              " {'city': 'Berlin', 'temperature': 1.24, 'month': 1},\n",
              " {'city': 'Beijing', 'temperature': -4.06, 'month': 1},\n",
              " {'city': 'Rio de Janeiro', 'temperature': 25.67, 'month': 1},\n",
              " {'city': 'Dubai', 'temperature': 22.96, 'month': 1},\n",
              " {'city': 'Los Angeles', 'temperature': 13.22, 'month': 1},\n",
              " {'city': 'Singapore', 'temperature': 23.54, 'month': 1},\n",
              " {'city': 'Mumbai', 'temperature': 24.99, 'month': 1},\n",
              " {'city': 'Cairo', 'temperature': 19.42, 'month': 1},\n",
              " {'city': 'Mexico City', 'temperature': 12.75, 'month': 1}]"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Проверка результата\n",
        "results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# Асинхронная функция получения температуры города\n",
        "async def get_current_temp_of_city_async(API_KEY, city, session):\n",
        "    URL = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric'\n",
        "    async with session.get(URL) as response:\n",
        "        if response.status == 200:\n",
        "            data = await response.json()\n",
        "            temperature = data['main']['temp']\n",
        "            current_datetime = datetime.datetime.now()\n",
        "            month_of_temp = current_datetime.month\n",
        "            return {\"city\": city, \"temperature\": temperature, \"month\": month_of_temp}\n",
        "        else:\n",
        "            return {\"city\": city, \"temperature\": None, \"month\": None, \"error\": await response.text()}\n",
        "\n",
        "# Асинхронная функция для обработки списка городов\n",
        "async def get_weather_for_cities_async(API_KEY, cities):\n",
        "    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:\n",
        "        tasks = [get_current_temp_of_city_async(API_KEY, city, session) for city in cities]\n",
        "        results = await asyncio.gather(*tasks, return_exceptions=True)\n",
        "        return results\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Асинхронное выполнение заняло: 0.30 секунд\n"
          ]
        }
      ],
      "source": [
        "API_KEY = \"a930241dd9464b1168656e0a6630b7a7\"\n",
        "cities = data['city'].unique()\n",
        "\n",
        "# Замер времени выполнения\n",
        "start_time = time.time()\n",
        "\n",
        "results_async = await get_weather_for_cities_async(API_KEY, cities)\n",
        "\n",
        "duration = time.time() - start_time\n",
        "print(f\"Асинхронное выполнение заняло: {duration:.2f} секунд\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[{'city': 'New York', 'temperature': 4.44, 'month': 1},\n",
              " {'city': 'London', 'temperature': 2.45, 'month': 1},\n",
              " {'city': 'Paris', 'temperature': 4.2, 'month': 1},\n",
              " {'city': 'Tokyo', 'temperature': 5.09, 'month': 1},\n",
              " {'city': 'Moscow', 'temperature': -0.52, 'month': 1},\n",
              " {'city': 'Sydney', 'temperature': 21.29, 'month': 1},\n",
              " {'city': 'Berlin', 'temperature': 1.24, 'month': 1},\n",
              " {'city': 'Beijing', 'temperature': -4.06, 'month': 1},\n",
              " {'city': 'Rio de Janeiro', 'temperature': 25.67, 'month': 1},\n",
              " {'city': 'Dubai', 'temperature': 22.96, 'month': 1},\n",
              " {'city': 'Los Angeles', 'temperature': 13.98, 'month': 1},\n",
              " {'city': 'Singapore', 'temperature': 23.54, 'month': 1},\n",
              " {'city': 'Mumbai', 'temperature': 24.99, 'month': 1},\n",
              " {'city': 'Cairo', 'temperature': 19.42, 'month': 1},\n",
              " {'city': 'Mexico City', 'temperature': 12.75, 'month': 1}]"
            ]
          },
          "execution_count": 46,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Результат асинхронного парсинга\n",
        "results_async"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "***Вывод:Асинхронное обращение к апи осуществляется гораздо быстрее, чем последовательное***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {},
      "outputs": [],
      "source": [
        "def temperature_is_normal_or_not(city, profile_of_season, temperature, month_of_temp):\n",
        "    current_season = month_to_season_mapping.get(month_of_temp)\n",
        "    profile_of_season = profile_of_season.query('season == @current_season')\n",
        "\n",
        "    \n",
        "    mean_temp = profile_of_season['temperature_mean'].iloc[0]\n",
        "    std_temp = profile_of_season['temperature_std'].iloc[0]\n",
        "\n",
        "    lower_bound = mean_temp - 2 * std_temp\n",
        "    upper_bound = mean_temp + 2 * std_temp \n",
        "\n",
        "    if lower_bound <= temperature <= upper_bound:\n",
        "        return f\"The temperature {temperature}°C in {city} is NORMAL for {current_season}.\"\n",
        "    else:\n",
        "        return f\"The temperature {temperature}°C in {city} is NOT NORMAL for {current_season}.\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The temperature 4.33°C in New York is NORMAL for winter.\n",
            "The temperature 2.45°C in London is NORMAL for winter.\n",
            "The temperature 4.2°C in Paris is NORMAL for winter.\n",
            "The temperature 5.09°C in Tokyo is NORMAL for winter.\n",
            "The temperature -0.52°C in Moscow is NORMAL for winter.\n",
            "The temperature 21.29°C in Sydney is NORMAL for winter.\n",
            "The temperature 1.24°C in Berlin is NORMAL for winter.\n",
            "The temperature -4.06°C in Beijing is NORMAL for winter.\n",
            "The temperature 25.67°C in Rio de Janeiro is NORMAL for winter.\n",
            "The temperature 22.96°C in Dubai is NORMAL for winter.\n",
            "The temperature 14.04°C in Los Angeles is NORMAL for winter.\n",
            "The temperature 22.8°C in Singapore is NORMAL for winter.\n",
            "The temperature 24.99°C in Mumbai is NORMAL for winter.\n",
            "The temperature 19.42°C in Cairo is NORMAL for winter.\n",
            "The temperature 12.75°C in Mexico City is NORMAL for winter.\n"
          ]
        }
      ],
      "source": [
        "# Посмотрим есть ли аномальная температура по городам\n",
        "city_results, _ = analyze_cities_default(df, cities)\n",
        "\n",
        "for result in city_results:\n",
        "    city = result['city']\n",
        "    profile_of_season = result['profile_of_season']\n",
        "    temperature, month_of_temp = get_current_temp_of_city(API_KEY, city)\n",
        "\n",
        "    # Проверка на нормальность температуры\n",
        "    is_temp_normal = temperature_is_normal_or_not(city, profile_of_season, temperature, month_of_temp)\n",
        "    print(is_temp_normal)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
